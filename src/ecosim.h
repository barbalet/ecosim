/****************************************************************ecosim.h=============================================================Copyright 1996-2016 Tom Barbalet. All rights reserved.Permission is hereby granted, free of charge, to any personobtaining a copy of this software and associated documentationfiles (the "Software"), to deal in the Software withoutrestriction, including without limitation the rights to use,copy, modify, merge, publish, distribute, sublicense, and/orsell copies of the Software, and to permit persons to whom theSoftware is furnished to do so, subject to the followingconditions:The above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIESOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE ANDNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHTHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISINGFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OROTHER DEALINGS IN THE SOFTWARE.This software and Noble Ape are a continuing work of Tom Barbalet,begun on 13 June 1996. No apes or cats were harmed in the writingof this software.****************************************************************//* Menu indices */#define appleID                  1#define fileID                   2#define editID                   3#define graphID                  4#define animalsID                5#define plantsID                 6/*-------------------------------*/#define fmNew                    1#define fmOpen                   2#define fmClose                  3#define fmSave                   4#define fmSaveAs                 5#define fmPrefs                  7#define fmQuit                   9/*-------------------------------*/#define undoCommand              1#define cutCommand               3#define copyCommand              4#define pasteCommand             5#define clearCommand             6#define selallCommand            8/*-------------------------------*/#define amGrass                  1#define amBush                   2#define amTree                   3#define amSedBird                5#define amInsBird                6#define amSeaBird                7#define amBirdofPrey             8#define amSeaFish                10#define amInsect                 11#define amMice                   12#define amFrog                   13#define amLizards                14#define amFFeline                16#define amNApes                  17/*-------------------------------*/#define SEARCH_SAMPLES          300#define MIN_EATS              0.002#define MAX_EATS               0.02#define MIN_GROWTH            0.002#define MAX_GROWTH             0.02#define ECOSYSTEM_MAX_SPECIES    32typedef enum{    cNone = -1,    cGrass = 0,    cBush,    cTree,    cSeEB,    cIEB,    cSeaB,    cBoP,    cFish,    cIns,    cMous,    cFrog,    cLiz,    cCat,    cApe,    cSize,    cSun} critter_identifier;enum{    MICROSCOPIC_PLANTS = 0,    PONDWEED,    PERIPHYTON,    DETRITUS,    DROWNED_INVERTEBRATES,    DAPHNIA,    MAYFLY_LARVA,    POND_SNAIL,    LESSER_WATER_BOATMAN,    STICKLEBACK,    GREATER_WATER_BOATMAN,    DRAGONFLY_LARVA,    GREAT_DIVING_BEATLE_LARVA,    POND_SKATER,    KINGFISHER,    POND_SPECIES};typedef struct{    double         consuption_rate_per_critter;    double         energy_per_unit;    critter_identifier critter_type;}critter_diet;typedef struct{    double population;    double growth_rate;} ecosim_plant;typedef struct{    double population;    double energy;    double growth_rate_on_energy;    critter_diet diet;} ecosim_critter;typedef struct{    int species_index[ECOSYSTEM_MAX_SPECIES];    double rate[ECOSYSTEM_MAX_SPECIES];} ecosim_eats;typedef struct{    double pop[ECOSYSTEM_MAX_SPECIES];    double maxpop[ECOSYSTEM_MAX_SPECIES];    double growth[ECOSYSTEM_MAX_SPECIES];    ecosim_eats eats[ECOSYSTEM_MAX_SPECIES];    double score;    unsigned int survival_steps;} ecosim_genome;typedef struct{    unsigned int species;    char species_name[ECOSYSTEM_MAX_SPECIES][32];    char species_name_short[ECOSYSTEM_MAX_SPECIES][32];    ecosim_genome genome[SEARCH_SAMPLES];    double mutation_rate;    unsigned int itterations;    unsigned int collapses;} ecosim_search;/*-------------------------------*/extern char critter_names[ECOSYSTEM_MAX_SPECIES][20];extern char critter_names_short[ECOSYSTEM_MAX_SPECIES][4];void system_init(ecosim_genome * eco, ecosim_genome * template);void system_cycle(ecosim_genome * eco, unsigned int species, int range_check);void SetEats(ecosim_genome * eco, int index, int eats_index, double rate);int GetPop(ecosim_genome * eco, unsigned int species_index);void SetPop(ecosim_genome * eco, unsigned int species_index, unsigned int size);double GetGrow(ecosim_genome * eco, unsigned int species_index);void SetGrow(ecosim_genome * eco, unsigned int species_index, double rate);void search_cycle(ecosim_search * sim);void search_test(ecosim_search * sim, ecosim_genome * eco, unsigned int species, unsigned int itterations, int show);void system_clear_eats(ecosim_genome * eco, unsigned int species);void set_species_name(ecosim_search * sim, unsigned int index, char * name);void set_species_name_short(ecosim_search * sim, unsigned int index, char * short_name);